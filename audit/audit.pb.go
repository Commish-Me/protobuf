// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.15.3
// source: audit/audit.proto

package go_api

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserAuditRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *UserAuditRequest) Reset() {
	*x = UserAuditRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_audit_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAuditRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAuditRequest) ProtoMessage() {}

func (x *UserAuditRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audit_audit_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAuditRequest.ProtoReflect.Descriptor instead.
func (*UserAuditRequest) Descriptor() ([]byte, []int) {
	return file_audit_audit_proto_rawDescGZIP(), []int{0}
}

func (x *UserAuditRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type ParsedAuditEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ParsedAuditEntry) Reset() {
	*x = ParsedAuditEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_audit_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParsedAuditEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParsedAuditEntry) ProtoMessage() {}

func (x *ParsedAuditEntry) ProtoReflect() protoreflect.Message {
	mi := &file_audit_audit_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParsedAuditEntry.ProtoReflect.Descriptor instead.
func (*ParsedAuditEntry) Descriptor() ([]byte, []int) {
	return file_audit_audit_proto_rawDescGZIP(), []int{1}
}

func (x *ParsedAuditEntry) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_audit_audit_proto protoreflect.FileDescriptor

var file_audit_audit_proto_rawDesc = []byte{
	0x0a, 0x11, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2a, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x22, 0x2c, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0x73, 0x0a, 0x05, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x6a, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x17, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76,
	0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x30, 0x01, 0x42, 0x1e, 0x5a, 0x1c, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x68, 0x2d, 0x4d, 0x65,
	0x2f, 0x67, 0x6f, 0x2d, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_audit_audit_proto_rawDescOnce sync.Once
	file_audit_audit_proto_rawDescData = file_audit_audit_proto_rawDesc
)

func file_audit_audit_proto_rawDescGZIP() []byte {
	file_audit_audit_proto_rawDescOnce.Do(func() {
		file_audit_audit_proto_rawDescData = protoimpl.X.CompressGZIP(file_audit_audit_proto_rawDescData)
	})
	return file_audit_audit_proto_rawDescData
}

var file_audit_audit_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_audit_audit_proto_goTypes = []interface{}{
	(*UserAuditRequest)(nil), // 0: audit.UserAuditRequest
	(*ParsedAuditEntry)(nil), // 1: audit.ParsedAuditEntry
}
var file_audit_audit_proto_depIdxs = []int32{
	0, // 0: audit.Audit.GetUserAuditEntries:input_type -> audit.UserAuditRequest
	1, // 1: audit.Audit.GetUserAuditEntries:output_type -> audit.ParsedAuditEntry
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_audit_audit_proto_init() }
func file_audit_audit_proto_init() {
	if File_audit_audit_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_audit_audit_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAuditRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_audit_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParsedAuditEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_audit_audit_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_audit_audit_proto_goTypes,
		DependencyIndexes: file_audit_audit_proto_depIdxs,
		MessageInfos:      file_audit_audit_proto_msgTypes,
	}.Build()
	File_audit_audit_proto = out.File
	file_audit_audit_proto_rawDesc = nil
	file_audit_audit_proto_goTypes = nil
	file_audit_audit_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AuditClient is the client API for Audit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuditClient interface {
	// Returns a list of recent auit entries for the user
	GetUserAuditEntries(ctx context.Context, in *UserAuditRequest, opts ...grpc.CallOption) (Audit_GetUserAuditEntriesClient, error)
}

type auditClient struct {
	cc grpc.ClientConnInterface
}

func NewAuditClient(cc grpc.ClientConnInterface) AuditClient {
	return &auditClient{cc}
}

func (c *auditClient) GetUserAuditEntries(ctx context.Context, in *UserAuditRequest, opts ...grpc.CallOption) (Audit_GetUserAuditEntriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Audit_serviceDesc.Streams[0], "/audit.Audit/GetUserAuditEntries", opts...)
	if err != nil {
		return nil, err
	}
	x := &auditGetUserAuditEntriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Audit_GetUserAuditEntriesClient interface {
	Recv() (*ParsedAuditEntry, error)
	grpc.ClientStream
}

type auditGetUserAuditEntriesClient struct {
	grpc.ClientStream
}

func (x *auditGetUserAuditEntriesClient) Recv() (*ParsedAuditEntry, error) {
	m := new(ParsedAuditEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AuditServer is the server API for Audit service.
type AuditServer interface {
	// Returns a list of recent auit entries for the user
	GetUserAuditEntries(*UserAuditRequest, Audit_GetUserAuditEntriesServer) error
}

// UnimplementedAuditServer can be embedded to have forward compatible implementations.
type UnimplementedAuditServer struct {
}

func (*UnimplementedAuditServer) GetUserAuditEntries(*UserAuditRequest, Audit_GetUserAuditEntriesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserAuditEntries not implemented")
}

func RegisterAuditServer(s *grpc.Server, srv AuditServer) {
	s.RegisterService(&_Audit_serviceDesc, srv)
}

func _Audit_GetUserAuditEntries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserAuditRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuditServer).GetUserAuditEntries(m, &auditGetUserAuditEntriesServer{stream})
}

type Audit_GetUserAuditEntriesServer interface {
	Send(*ParsedAuditEntry) error
	grpc.ServerStream
}

type auditGetUserAuditEntriesServer struct {
	grpc.ServerStream
}

func (x *auditGetUserAuditEntriesServer) Send(m *ParsedAuditEntry) error {
	return x.ServerStream.SendMsg(m)
}

var _Audit_serviceDesc = grpc.ServiceDesc{
	ServiceName: "audit.Audit",
	HandlerType: (*AuditServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUserAuditEntries",
			Handler:       _Audit_GetUserAuditEntries_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "audit/audit.proto",
}
